// Code generated by "go-enum -type=ModeType -linecomment -sql=false"; DO NOT EDIT.

package match

import (
	"encoding"
	"encoding/json"
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ModeUnknown-0]
	_ = x[ModeAllow-1]
	_ = x[ModeDeny-2]
}

const _ModeType_name = "unknownallowdeny"

var _ModeType_index = [...]uint8{0, 7, 12, 16}

func _() {
	var _nil_ModeType_value = func() (val ModeType) { return }()

	// An "cannot convert ModeType literal (type ModeType) to type fmt.Stringer" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ fmt.Stringer = _nil_ModeType_value
}

func (i ModeType) String() string {
	if i < 0 || i >= ModeType(len(_ModeType_index)-1) {
		return "ModeType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ModeType_name[_ModeType_index[i]:_ModeType_index[i+1]]
}

var _ModeType_values = []ModeType{0, 1, 2}

var _ModeType_name_to_values = map[string]ModeType{
	_ModeType_name[0:7]:   0,
	_ModeType_name[7:12]:  1,
	_ModeType_name[12:16]: 2,
}

// ParseModeTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ParseModeTypeString(s string) (ModeType, error) {
	if val, ok := _ModeType_name_to_values[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ModeType values", s)
}

// ModeTypeValues returns all values of the enum
func ModeTypeValues() []ModeType {
	return _ModeType_values
}

// IsAModeType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ModeType) Registered() bool {
	for _, v := range _ModeType_values {
		if i == v {
			return true
		}
	}
	return false
}

func _() {
	var _nil_ModeType_value = func() (val ModeType) { return }()

	// An "cannot convert ModeType literal (type ModeType) to type encoding.BinaryMarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.BinaryMarshaler = &_nil_ModeType_value

	// An "cannot convert ModeType literal (type ModeType) to type encoding.BinaryUnmarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.BinaryUnmarshaler = &_nil_ModeType_value
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for ModeType
func (i ModeType) MarshalBinary() (data []byte, err error) {
	return []byte(i.String()), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for ModeType
func (i *ModeType) UnmarshalBinary(data []byte) error {
	var err error
	*i, err = ParseModeTypeString(string(data))
	return err
}

func _() {
	var _nil_ModeType_value = func() (val ModeType) { return }()

	// An "cannot convert ModeType literal (type ModeType) to type json.Marshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ json.Marshaler = _nil_ModeType_value

	// An "cannot convert ModeType literal (type ModeType) to type encoding.Unmarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ json.Unmarshaler = &_nil_ModeType_value
}

// MarshalJSON implements the json.Marshaler interface for ModeType
func (i ModeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ModeType
func (i *ModeType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ModeType should be a string, got %s", data)
	}

	var err error
	*i, err = ParseModeTypeString(s)
	return err
}

func _() {
	var _nil_ModeType_value = func() (val ModeType) { return }()

	// An "cannot convert ModeType literal (type ModeType) to type encoding.TextMarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.TextMarshaler = _nil_ModeType_value

	// An "cannot convert ModeType literal (type ModeType) to type encoding.TextUnmarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.TextUnmarshaler = &_nil_ModeType_value
}

// MarshalText implements the encoding.TextMarshaler interface for ModeType
func (i ModeType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ModeType
func (i *ModeType) UnmarshalText(text []byte) error {
	var err error
	*i, err = ParseModeTypeString(string(text))
	return err
}

//func _() {
//	var _nil_ModeType_value = func() (val ModeType) { return }()
//
//	// An "cannot convert ModeType literal (type ModeType) to type yaml.Marshaler" compiler error signifies that the base type have changed.
//	// Re-run the go-enum command to generate them again.
//	var _ yaml.Marshaler = _nil_ModeType_value
//
//	// An "cannot convert ModeType literal (type ModeType) to type yaml.Unmarshaler" compiler error signifies that the base type have changed.
//	// Re-run the go-enum command to generate them again.
//	var _ yaml.Unmarshaler = &_nil_ModeType_value
//}

// MarshalYAML implements a YAML Marshaler for ModeType
func (i ModeType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for ModeType
func (i *ModeType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ParseModeTypeString(s)
	return err
}

// ModeTypeSliceContains reports whether sunEnums is within enums.
func ModeTypeSliceContains(enums []ModeType, sunEnums ...ModeType) bool {
	var seenEnums = map[ModeType]bool{}
	for _, e := range sunEnums {
		seenEnums[e] = false
	}

	for _, v := range enums {
		if _, has := seenEnums[v]; has {
			seenEnums[v] = true
		}
	}

	for _, seen := range seenEnums {
		if !seen {
			return false
		}
	}

	return true
}

// ModeTypeSliceContainsAny reports whether any sunEnum is within enums.
func ModeTypeSliceContainsAny(enums []ModeType, sunEnums ...ModeType) bool {
	var seenEnums = map[ModeType]struct{}{}
	for _, e := range sunEnums {
		seenEnums[e] = struct{}{}
	}

	for _, v := range enums {
		if _, has := seenEnums[v]; has {
			return true
		}
	}

	return false
}
