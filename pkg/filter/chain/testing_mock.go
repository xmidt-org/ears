// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package chain

import (
	"context"
	"github.com/xmidt-org/ears/pkg/event"
	"github.com/xmidt-org/ears/pkg/filter"
	"sync"
)

// Ensure, that FiltererChainMock does implement FiltererChain.
// If this is not the case, regenerate this file with moq.
var _ FiltererChain = &FiltererChainMock{}

// FiltererChainMock is a mock implementation of FiltererChain.
//
//     func TestSomethingThatUsesFiltererChain(t *testing.T) {
//
//         // make and configure a mocked FiltererChain
//         mockedFiltererChain := &FiltererChainMock{
//             AddFunc: func(f filter.Filterer)  {
// 	               panic("mock out the Add method")
//             },
//             FilterFunc: func(ctx context.Context, e event.Event) ([]event.Event, []error) {
// 	               panic("mock out the Filter method")
//             },
//         }
//
//         // use mockedFiltererChain in code that requires FiltererChain
//         // and then make assertions.
//
//     }
type FiltererChainMock struct {
	// AddFunc mocks the Add method.
	AddFunc func(f filter.Filterer)

	// FilterFunc mocks the Filter method.
	FilterFunc func(ctx context.Context, e event.Event) ([]event.Event, []error)

	// calls tracks calls to the methods.
	calls struct {
		// Add holds details about calls to the Add method.
		Add []struct {
			// F is the f argument value.
			F filter.Filterer
		}
		// Filter holds details about calls to the Filter method.
		Filter []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// E is the e argument value.
			E event.Event
		}
	}
	lockAdd    sync.RWMutex
	lockFilter sync.RWMutex
}

// Add calls AddFunc.
func (mock *FiltererChainMock) Add(f filter.Filterer) {
	if mock.AddFunc == nil {
		panic("FiltererChainMock.AddFunc: method is nil but FiltererChain.Add was just called")
	}
	callInfo := struct {
		F filter.Filterer
	}{
		F: f,
	}
	mock.lockAdd.Lock()
	mock.calls.Add = append(mock.calls.Add, callInfo)
	mock.lockAdd.Unlock()
	mock.AddFunc(f)
}

// AddCalls gets all the calls that were made to Add.
// Check the length with:
//     len(mockedFiltererChain.AddCalls())
func (mock *FiltererChainMock) AddCalls() []struct {
	F filter.Filterer
} {
	var calls []struct {
		F filter.Filterer
	}
	mock.lockAdd.RLock()
	calls = mock.calls.Add
	mock.lockAdd.RUnlock()
	return calls
}

// Filter calls FilterFunc.
func (mock *FiltererChainMock) Filter(ctx context.Context, e event.Event) ([]event.Event, []error) {
	if mock.FilterFunc == nil {
		panic("FiltererChainMock.FilterFunc: method is nil but FiltererChain.Filter was just called")
	}
	callInfo := struct {
		Ctx context.Context
		E   event.Event
	}{
		Ctx: ctx,
		E:   e,
	}
	mock.lockFilter.Lock()
	mock.calls.Filter = append(mock.calls.Filter, callInfo)
	mock.lockFilter.Unlock()
	return mock.FilterFunc(ctx, e)
}

// FilterCalls gets all the calls that were made to Filter.
// Check the length with:
//     len(mockedFiltererChain.FilterCalls())
func (mock *FiltererChainMock) FilterCalls() []struct {
	Ctx context.Context
	E   event.Event
} {
	var calls []struct {
		Ctx context.Context
		E   event.Event
	}
	mock.lockFilter.RLock()
	calls = mock.calls.Filter
	mock.lockFilter.RUnlock()
	return calls
}
