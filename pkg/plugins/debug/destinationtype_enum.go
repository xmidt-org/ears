// Code generated by "go-enum -type=DestinationType -linecomment -sql=false"; DO NOT EDIT.

package debug

import (
	"encoding"
	"encoding/json"
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DestinationUnknown-0]
	_ = x[DestinationDevNull-1]
	_ = x[DestinationStdout-2]
	_ = x[DestinationStderr-3]
	_ = x[DestinationCustom-4]
}

const _DestinationType_name = "unknowndevnullstdoutstderrcustom"

var _DestinationType_index = [...]uint8{0, 7, 14, 20, 26, 32}

func _() {
	var _nil_DestinationType_value = func() (val DestinationType) { return }()

	// An "cannot convert DestinationType literal (type DestinationType) to type fmt.Stringer" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ fmt.Stringer = _nil_DestinationType_value
}

func (i DestinationType) String() string {
	if i < 0 || i >= DestinationType(len(_DestinationType_index)-1) {
		return "DestinationType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _DestinationType_name[_DestinationType_index[i]:_DestinationType_index[i+1]]
}

var _DestinationType_values = []DestinationType{0, 1, 2, 3, 4}

var _DestinationType_name_to_values = map[string]DestinationType{
	_DestinationType_name[0:7]:   0,
	_DestinationType_name[7:14]:  1,
	_DestinationType_name[14:20]: 2,
	_DestinationType_name[20:26]: 3,
	_DestinationType_name[26:32]: 4,
}

// ParseDestinationTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ParseDestinationTypeString(s string) (DestinationType, error) {
	if val, ok := _DestinationType_name_to_values[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%[1]s does not belong to DestinationType values", s)
}

// DestinationTypeValues returns all values of the enum
func DestinationTypeValues() []DestinationType {
	return _DestinationType_values
}

// IsADestinationType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DestinationType) Registered() bool {
	for _, v := range _DestinationType_values {
		if i == v {
			return true
		}
	}
	return false
}

func _() {
	var _nil_DestinationType_value = func() (val DestinationType) { return }()

	// An "cannot convert DestinationType literal (type DestinationType) to type encoding.BinaryMarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.BinaryMarshaler = &_nil_DestinationType_value

	// An "cannot convert DestinationType literal (type DestinationType) to type encoding.BinaryUnmarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.BinaryUnmarshaler = &_nil_DestinationType_value
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for DestinationType
func (i DestinationType) MarshalBinary() (data []byte, err error) {
	return []byte(i.String()), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for DestinationType
func (i *DestinationType) UnmarshalBinary(data []byte) error {
	var err error
	*i, err = ParseDestinationTypeString(string(data))
	return err
}

func _() {
	var _nil_DestinationType_value = func() (val DestinationType) { return }()

	// An "cannot convert DestinationType literal (type DestinationType) to type json.Marshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ json.Marshaler = _nil_DestinationType_value

	// An "cannot convert DestinationType literal (type DestinationType) to type encoding.Unmarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ json.Unmarshaler = &_nil_DestinationType_value
}

// MarshalJSON implements the json.Marshaler interface for DestinationType
func (i DestinationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DestinationType
func (i *DestinationType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("%[1]s should be a string, got DestinationType", data)
	}

	var err error
	*i, err = ParseDestinationTypeString(s)
	return err
}

func _() {
	var _nil_DestinationType_value = func() (val DestinationType) { return }()

	// An "cannot convert DestinationType literal (type DestinationType) to type encoding.TextMarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.TextMarshaler = _nil_DestinationType_value

	// An "cannot convert DestinationType literal (type DestinationType) to type encoding.TextUnmarshaler" compiler error signifies that the base type have changed.
	// Re-run the go-enum command to generate them again.
	var _ encoding.TextUnmarshaler = &_nil_DestinationType_value
}

// MarshalText implements the encoding.TextMarshaler interface for DestinationType
func (i DestinationType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for DestinationType
func (i *DestinationType) UnmarshalText(text []byte) error {
	var err error
	*i, err = ParseDestinationTypeString(string(text))
	return err
}

//func _() {
//	var _nil_DestinationType_value = func() (val DestinationType) { return }()
//
//	// An "cannot convert DestinationType literal (type DestinationType) to type yaml.Marshaler" compiler error signifies that the base type have changed.
//	// Re-run the go-enum command to generate them again.
//	var _ yaml.Marshaler = _nil_DestinationType_value
//
//	// An "cannot convert DestinationType literal (type DestinationType) to type yaml.Unmarshaler" compiler error signifies that the base type have changed.
//	// Re-run the go-enum command to generate them again.
//	var _ yaml.Unmarshaler = &_nil_DestinationType_value
//}

// MarshalYAML implements a YAML Marshaler for DestinationType
func (i DestinationType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for DestinationType
func (i *DestinationType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ParseDestinationTypeString(s)
	return err
}

// DestinationTypeSliceContains reports whether sunEnums is within enums.
func DestinationTypeSliceContains(enums []DestinationType, sunEnums ...DestinationType) bool {
	var seenEnums = map[DestinationType]bool{}
	for _, e := range sunEnums {
		seenEnums[e] = false
	}

	for _, v := range enums {
		if _, has := seenEnums[v]; has {
			seenEnums[v] = true
		}
	}

	for _, seen := range seenEnums {
		if !seen {
			return false
		}
	}

	return true
}

// DestinationTypeSliceContainsAny reports whether any sunEnum is within enums.
func DestinationTypeSliceContainsAny(enums []DestinationType, sunEnums ...DestinationType) bool {
	var seenEnums = map[DestinationType]struct{}{}
	for _, e := range sunEnums {
		seenEnums[e] = struct{}{}
	}

	for _, v := range enums {
		if _, has := seenEnums[v]; has {
			return true
		}
	}

	return false
}
